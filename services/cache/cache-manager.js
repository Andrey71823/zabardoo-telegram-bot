const fs = require('fs').promises;
const path = require('path');
const config = require('../../config/api-config');

class CacheManager {
  constructor() {
    this.cacheDir = path.join(__dirname, '../../data/cache');
    this.ensureCacheDir();
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫—ç—à–∞
  async ensureCacheDir() {
    try {
      await fs.mkdir(this.cacheDir, { recursive: true });
    } catch (error) {
      console.error('Error creating cache directory:', error);
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à
  async set(key, data, ttl = 3600000) { // 1 —á–∞—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    try {
      const cacheData = {
        data: data,
        timestamp: Date.now(),
        ttl: ttl,
        expiresAt: Date.now() + ttl
      };

      const filePath = path.join(this.cacheDir, `${key}.json`);
      await fs.writeFile(filePath, JSON.stringify(cacheData, null, 2));

      console.log(`‚úÖ Cached data for key: ${key}`);
    } catch (error) {
      console.error(`Error caching data for key ${key}:`, error);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞
  async get(key) {
    try {
      const filePath = path.join(this.cacheDir, `${key}.json`);
      const cacheData = JSON.parse(await fs.readFile(filePath, 'utf8'));

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
      if (Date.now() > cacheData.expiresAt) {
        await this.delete(key);
        return null;
      }

      console.log(`üìã Retrieved cached data for key: ${key}`);
      return cacheData.data;
    } catch (error) {
      // –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω
      return null;
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞
  async delete(key) {
    try {
      const filePath = path.join(this.cacheDir, `${key}.json`);
      await fs.unlink(filePath);
      console.log(`üóëÔ∏è Deleted cache for key: ${key}`);
    } catch (error) {
      // –§–∞–π–ª —É–∂–µ —É–¥–∞–ª–µ–Ω
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫—ç—à–∞
  async clear() {
    try {
      const files = await fs.readdir(this.cacheDir);
      for (const file of files) {
        if (file.endsWith('.json')) {
          await fs.unlink(path.join(this.cacheDir, file));
        }
      }
      console.log('üßπ Cache cleared');
    } catch (error) {
      console.error('Error clearing cache:', error);
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–µ–≥–æ –∫—ç—à–∞
  async cleanExpired() {
    try {
      const files = await fs.readdir(this.cacheDir);
      let cleaned = 0;

      for (const file of files) {
        if (file.endsWith('.json')) {
          const filePath = path.join(this.cacheDir, file);
          try {
            const cacheData = JSON.parse(await fs.readFile(filePath, 'utf8'));
            if (Date.now() > cacheData.expiresAt) {
              await fs.unlink(filePath);
              cleaned++;
            }
          } catch (error) {
            // –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, —É–¥–∞–ª—è–µ–º
            await fs.unlink(filePath);
            cleaned++;
          }
        }
      }

      if (cleaned > 0) {
        console.log(`üßΩ Cleaned ${cleaned} expired cache entries`);
      }
    } catch (error) {
      console.error('Error cleaning expired cache:', error);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
  async getStats() {
    try {
      const files = await fs.readdir(this.cacheDir);
      let totalSize = 0;
      let validEntries = 0;
      let expiredEntries = 0;

      for (const file of files) {
        if (file.endsWith('.json')) {
          const filePath = path.join(this.cacheDir, file);
          try {
            const stats = await fs.stat(filePath);
            totalSize += stats.size;

            const cacheData = JSON.parse(await fs.readFile(filePath, 'utf8'));
            if (Date.now() > cacheData.expiresAt) {
              expiredEntries++;
            } else {
              validEntries++;
            }
          } catch (error) {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
          }
        }
      }

      return {
        totalEntries: validEntries + expiredEntries,
        validEntries: validEntries,
        expiredEntries: expiredEntries,
        totalSize: totalSize,
        totalSizeMB: (totalSize / (1024 * 1024)).toFixed(2)
      };
    } catch (error) {
      console.error('Error getting cache stats:', error);
      return null;
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –¥–ª—è –∫—ç—à–∞
  generateKey(prefix, params) {
    const sortedParams = Object.keys(params)
      .sort()
      .map(key => `${key}=${params[key]}`)
      .join('&');
    return `${prefix}_${sortedParams}`;
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ TTL –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
  getTTL(type) {
    const ttls = {
      products: config.CACHE.TTL_PRODUCTS,
      food: config.CACHE.TTL_FOOD,
      promocodes: config.CACHE.TTL_PROMOCODES,
      maps: config.CACHE.TTL_MAPS,
      default: 3600000 // 1 —á–∞—Å
    };

    return ttls[type] || ttls.default;
  }
}

module.exports = CacheManager;

