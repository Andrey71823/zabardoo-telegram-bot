const ProductsService = require('./products/products-service');
const FoodService = require('./food/food-service');
const MapsService = require('./maps/maps-service');
const PromocodesService = require('./promocodes/promocodes-service');
const CacheManager = require('./cache/cache-manager');

class APIOrchestrator {
  constructor() {
    this.cacheManager = new CacheManager();
    this.productsService = new ProductsService();
    this.foodService = new FoodService();
    this.mapsService = new MapsService();
    this.promocodesService = new PromocodesService();

    // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
    this.startCacheCleanup();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
  async getProducts(category, options = {}) {
    try {
      const cacheKey = this.cacheManager.generateKey('products', { category, ...options });
      const cached = await this.cacheManager.get(cacheKey);

      if (cached) {
        return cached;
      }

      const products = await this.productsService.getProducts(category, options);
      const ttl = this.cacheManager.getTTL('products');
      await this.cacheManager.set(cacheKey, products, ttl);

      return products;
    } catch (error) {
      console.error('Error getting products:', error);
      return this.getFallbackData('products', category);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
  async getNearbyRestaurants(lat, lng, options = {}) {
    try {
      const cacheKey = this.cacheManager.generateKey('restaurants', { lat, lng, ...options });
      const cached = await this.cacheManager.get(cacheKey);

      if (cached) {
        return cached;
      }

      const restaurants = await this.foodService.getNearbyRestaurants(lat, lng, options);
      const ttl = this.cacheManager.getTTL('food');
      await this.cacheManager.set(cacheKey, restaurants, ttl);

      return restaurants;
    } catch (error) {
      console.error('Error getting restaurants:', error);
      return this.getFallbackData('restaurants');
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ü–∏–π –Ω–∞ –µ–¥—É
  async getFoodDeals(options = {}) {
    try {
      const cacheKey = this.cacheManager.generateKey('food_deals', options);
      const cached = await this.cacheManager.get(cacheKey);

      if (cached) {
        return cached;
      }

      const deals = await this.foodService.getFoodDeals(options);
      const ttl = this.cacheManager.getTTL('food');
      await this.cacheManager.set(cacheKey, deals, ttl);

      return deals;
    } catch (error) {
      console.error('Error getting food deals:', error);
      return this.getFallbackData('food_deals');
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ
  async getNearbyStores(lat, lng, category, options = {}) {
    try {
      const cacheKey = this.cacheManager.generateKey('stores', { lat, lng, category, ...options });
      const cached = await this.cacheManager.get(cacheKey);

      if (cached) {
        return cached;
      }

      const stores = await this.mapsService.getNearbyStores(lat, lng, category, options);
      const ttl = this.cacheManager.getTTL('maps');
      await this.cacheManager.set(cacheKey, stores, ttl);

      return stores;
    } catch (error) {
      console.error('Error getting stores:', error);
      return this.getFallbackData('stores', category);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
  async getPromocodes(category, options = {}) {
    try {
      const cacheKey = this.cacheManager.generateKey('promocodes', { category, ...options });
      const cached = await this.cacheManager.get(cacheKey);

      if (cached) {
        return cached;
      }

      const promocodes = await this.promocodesService.getPromocodes(category, options);
      const ttl = this.cacheManager.getTTL('promocodes');
      await this.cacheManager.set(cacheKey, promocodes, ttl);

      return promocodes;
    } catch (error) {
      console.error('Error getting promocodes:', error);
      return this.getFallbackData('promocodes', category);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
  async getAllActivePromocodes(options = {}) {
    try {
      const cacheKey = this.cacheManager.generateKey('all_promocodes', options);
      const cached = await this.cacheManager.get(cacheKey);

      if (cached) {
        return cached;
      }

      const promocodes = await this.promocodesService.getAllActivePromocodes(options);
      const ttl = this.cacheManager.getTTL('promocodes');
      await this.cacheManager.set(cacheKey, promocodes, ttl);

      return promocodes;
    } catch (error) {
      console.error('Error getting all promocodes:', error);
      return [];
    }
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
  async validatePromocode(code, store, amount) {
    try {
      return await this.promocodesService.validatePromocode(code, store, amount);
    } catch (error) {
      console.error('Error validating promocode:', error);
      return { valid: false, reason: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞' };
    }
  }

  // –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
  async geocodeAddress(address) {
    try {
      const cacheKey = this.cacheManager.generateKey('geocode', { address });
      const cached = await this.cacheManager.get(cacheKey);

      if (cached) {
        return cached;
      }

      const result = await this.mapsService.geocodeAddress(address);
      const ttl = this.cacheManager.getTTL('maps');
      await this.cacheManager.set(cacheKey, result, ttl);

      return result;
    } catch (error) {
      console.error('Error geocoding address:', error);
      return null;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
  async getDistanceMatrix(origins, destinations, mode = 'driving') {
    try {
      return await this.mapsService.getDistanceMatrix(origins, destinations, mode);
    } catch (error) {
      console.error('Error getting distance matrix:', error);
      return null;
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
  async savePromocode(promocode) {
    try {
      return await this.promocodesService.savePromocode(promocode);
    } catch (error) {
      console.error('Error saving promocode:', error);
      return false;
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫—ç—à–∞
  async clearCache() {
    try {
      await this.cacheManager.clear();
      return true;
    } catch (error) {
      console.error('Error clearing cache:', error);
      return false;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
  async getCacheStats() {
    try {
      return await this.cacheManager.getStats();
    } catch (error) {
      console.error('Error getting cache stats:', error);
      return null;
    }
  }

  // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
  startCacheCleanup() {
    // –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    setInterval(async () => {
      await this.cacheManager.cleanExpired();
    }, 30 * 60 * 1000);

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–π —á–∞—Å
    setInterval(async () => {
      const stats = await this.getCacheStats();
      if (stats) {
        console.log('üìä Cache Stats:', stats);
      }
    }, 60 * 60 * 1000);
  }

  // Fallback –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
  getFallbackData(type, category = null) {
    const fallbacks = {
      products: [
        {
          id: 'fallback_1',
          title: '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä',
          price: 1000,
          originalPrice: 1200,
          discountPercent: 17,
          source: 'fallback',
          category: category || 'general'
        }
      ],
      restaurants: [
        {
          id: 'fallback_rest_1',
          name: '–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω',
          cuisines: '–†–∞–∑–ª–∏—á–Ω–∞—è –∫—É—Ö–Ω—è',
          rating: 4.5,
          source: 'fallback',
          deliveryTime: '25-35 –º–∏–Ω'
        }
      ],
      food_deals: [
        {
          id: 'fallback_deal_1',
          title: '–¢–µ—Å—Ç–æ–≤–∞—è –∞–∫—Ü–∏—è',
          description: '–°–∫–∏–¥–∫–∞ 20% –Ω–∞ –≤–µ—Å—å –∑–∞–∫–∞–∑',
          source: 'fallback'
        }
      ],
      stores: [
        {
          id: 'fallback_store_1',
          name: '–¢–µ—Å—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω',
          address: '–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å',
          rating: 4.2,
          category: category || 'general',
          source: 'fallback'
        }
      ],
      promocodes: [
        {
          code: 'TEST20',
          title: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥',
          description: '–°–∫–∏–¥–∫–∞ 20%',
          discountValue: 20,
          discountType: 'percentage',
          category: category || 'general',
          source: 'fallback',
          expiryDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString()
        }
      ]
    };

    return fallbacks[type] || [];
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ –≤—Å–µ–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
  async syncAllData() {
    console.log('üîÑ Starting data synchronization...');

    try {
      // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –∫—ç—à–∞
      await this.clearCache();

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤
      for (const category of Object.values(require('../config/api-config').CATEGORIES)) {
        await this.getProducts(category, { force: true });
        await this.getPromocodes(category, { force: true });
      }

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –µ–¥—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
      const locations = require('../config/api-config').LOCATIONS;
      for (const location of Object.values(locations)) {
        await this.getNearbyRestaurants(location.lat, location.lng, { force: true });
        await this.getNearbyStores(location.lat, location.lng, 'food', { force: true });
      }

      console.log('‚úÖ Data synchronization completed');
      return true;
    } catch (error) {
      console.error('‚ùå Data synchronization failed:', error);
      return false;
    }
  }
}

module.exports = APIOrchestrator;

