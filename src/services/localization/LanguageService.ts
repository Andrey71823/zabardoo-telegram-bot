import { EventEmitter } from 'events';
import { logger } from '../../config/logger';

export interface Language {
  code: string;
  name: string;
  nativeName: string;
  emoji: string;
  isActive: boolean;
  region: string;
}

export interface Translation {
  key: string;
  language: string;
  value: string;
  context?: string;
}

export class LanguageService extends EventEmitter {
  private languages: Map<string, Language> = new Map();
  private translations: Map<string, Map<string, string>> = new Map();
  private userLanguages: Map<string, string> = new Map();

  constructor() {
    super();
    this.initializeLanguages();
    this.initializeTranslations();
    logger.info('LanguageService initialized with 9 Indian languages');
  }

  private initializeLanguages(): void {
    const languages: Language[] = [
      {
        code: 'en',
        name: 'English',
        nativeName: 'English',
        emoji: 'ЁЯЗ║ЁЯЗ╕',
        isActive: true,
        region: 'Global'
      },
      {
        code: 'hi',
        name: 'Hindi',
        nativeName: 'рд╣рд┐рдВрджреА',
        emoji: 'ЁЯЗоЁЯЗ│',
        isActive: true,
        region: 'North India'
      },
      {
        code: 'bn',
        name: 'Bengali',
        nativeName: 'ржмрж╛ржВрж▓рж╛',
        emoji: 'ЁЯЗзЁЯЗй',
        isActive: true,
        region: 'West Bengal, Bangladesh'
      },
      {
        code: 'te',
        name: 'Telugu',
        nativeName: 'р░др▒Жр░▓р▒Бр░Чр▒Б',
        emoji: 'ЁЯПЫя╕П',
        isActive: true,
        region: 'Andhra Pradesh, Telangana'
      },
      {
        code: 'ta',
        name: 'Tamil',
        nativeName: 'родрооро┐ро┤рпН',
        emoji: 'ЁЯП║',
        isActive: true,
        region: 'Tamil Nadu'
      },
      {
        code: 'gu',
        name: 'Gujarati',
        nativeName: 'ркЧрлБркЬрк░рк╛ркдрлА',
        emoji: 'ЁЯжЪ',
        isActive: true,
        region: 'Gujarat'
      },
      {
        code: 'kn',
        name: 'Kannada',
        nativeName: 'р▓Хр▓ир│Нр▓ир▓б',
        emoji: 'ЁЯМ║',
        isActive: true,
        region: 'Karnataka'
      },
      {
        code: 'ml',
        name: 'Malayalam',
        nativeName: 'р┤ор┤▓р┤пр┤╛р┤│р┤В',
        emoji: 'ЁЯее',
        isActive: true,
        region: 'Kerala'
      },
      {
        code: 'mr',
        name: 'Marathi',
        nativeName: 'рдорд░рд╛рдареА',
        emoji: 'ЁЯПФя╕П',
        isActive: true,
        region: 'Maharashtra'
      }
    ];

    languages.forEach(lang => this.languages.set(lang.code, lang));
  }

  private initializeTranslations(): void {
    // Common UI translations
    const commonTranslations = {
      // Welcome messages
      'welcome.title': {
        en: 'Welcome to Zabardoo Enhanced Bot',
        hi: 'рдЬрд╝рдмрд░рджреВ рдПрдиреНрд╣рд╛рдВрд╕реНрдб рдмреЙрдЯ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ',
        bn: 'ржЬрж╛ржмрж╛рж░ржжрзБ ржПржирж╣рж╛ржирзНрж╕ржб ржмржЯрзЗ рж╕рзНржмрж╛ржЧрждржо',
        te: 'р░Ьр░мр░░р▒Нр░жр▒В р░Ор░ир▒Нр░╣р░╛р░ир▒Нр░╕р▒Нр░бр▒Н р░мр░╛р░Яр▒НтАМр░Хр▒Б р░╕р▒Нр░╡р░╛р░Чр░др░В',
        ta: 'роЬрокро░рпНродрпВ роорпЗроорпНрокроЯрпБродрпНродрокрпНрокроЯрпНроЯ рокрпЛроЯрпНроЯро┐ро▒рпНроХрпБ ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН',
        gu: 'ркЭркмрк░ркжрлВ ркПркирлНрк╣рк╛ркирлНрк╕рлНркб ркмрлЛркЯркорк╛ркВ ркЖрккркирлБркВ рк╕рлНрк╡рк╛ркЧркд ркЫрлЗ',
        kn: 'р▓Ьр▓мр▓░р│Нр▓жр│В р▓╡р▓░р│Нр▓зр▓┐р▓д р▓мр▓╛р▓Яр│НтАМр▓Чр│Ж р▓╕р│Нр▓╡р▓╛р▓Чр▓д',
        ml: 'р┤╕р┤мр╡╝р┤жр╡В р┤Ор╡╗р┤╣р┤╛р╡╗р┤╕р╡Нр┤бр╡Н р┤мр╡Лр┤Яр╡Нр┤Яр┤┐р┤▓р╡Зр┤Хр╡Нр┤Хр╡Н р┤╕р╡Нр┤╡р┤╛р┤Чр┤др┤В',
        mr: 'рдЭрдмрд░рджреВ рдПрдиреНрд╣рд╛рдиреНрд╕реНрдб рдмреЙрдЯрдордзреНрдпреЗ рдЖрдкрд▓реЗ рд╕реНрд╡рд╛рдЧрдд рдЖрд╣реЗ'
      },
      
      // Button labels
      'button.find_deals': {
        en: 'ЁЯФН Find Deals',
        hi: 'ЁЯФН рдбреАрд▓ рдЦреЛрдЬреЗрдВ',
        bn: 'ЁЯФН ржбрж┐рж▓ ржЦрзБржБржЬрзБржи',
        te: 'ЁЯФН р░бр▒Ар░▓р▒Нр░╕р▒Н р░Хр░ир▒Бр░Чр▒Кр░ир░Вр░бр░┐',
        ta: 'ЁЯФН роТрокрпНрокроирпНродроЩрпНроХро│рпИроХрпН роХрогрпНроЯро▒ро┐ропро╡рпБроорпН',
        gu: 'ЁЯФН ркбрлАрк▓рлНрк╕ рк╢рлЛркзрлЛ',
        kn: 'ЁЯФН р▓бр│Ар▓▓р│НтАМр▓Чр▓│р▓ир│Нр▓ир│Б р▓╣р│Бр▓бр│Бр▓Хр▓┐',
        ml: 'ЁЯФН р┤бр╡Ар┤▓р╡Бр┤Хр╡╛ р┤Хр┤гр╡Нр┤Яр╡Жр┤др╡Нр┤др╡Бр┤Х',
        mr: 'ЁЯФН рдбреАрд▓ рд╢реЛрдзрд╛'
      },

      'button.my_profile': {
        en: 'ЁЯОо My Profile',
        hi: 'ЁЯОо рдореЗрд░реА рдкреНрд░реЛрдлрд╛рдЗрд▓',
        bn: 'ЁЯОо ржЖржорж╛рж░ ржкрзНрж░рзЛржлрж╛ржЗрж▓',
        te: 'ЁЯОо р░ир░╛ р░кр▒Нр░░р▒Кр░лр▒Ир░▓р▒Н',
        ta: 'ЁЯОо роОройродрпБ роЪрпБропро╡ро┐ро╡ро░роорпН',
        gu: 'ЁЯОо ркорк╛рк░рлА рккрлНрк░рлЛрклрк╛ркЗрк▓',
        kn: 'ЁЯОо р▓ир▓ир│Нр▓и р▓кр│Нр▓░р│Кр▓лр│Ир▓▓р│Н',
        ml: 'ЁЯОо р┤Ор┤ир╡Нр┤▒р╡Ж р┤кр╡Нр┤░р╡Кр┤лр╡Ир╡╜',
        mr: 'ЁЯОо рдорд╛рдЭреЗ рдкреНрд░реЛрдлрд╛рдЗрд▓'
      },

      'button.cashback': {
        en: 'ЁЯТ░ Cashback',
        hi: 'ЁЯТ░ рдХреИрд╢рдмреИрдХ',
        bn: 'ЁЯТ░ ржХрзНржпрж╛рж╢ржмрзНржпрж╛ржХ',
        te: 'ЁЯТ░ р░Хр▒Нр░пр░╛р░╖р▒НтАМр░мр▒Нр░пр░╛р░Хр▒Н',
        ta: 'ЁЯТ░ рокрогродрпНродрпИродрпН родро┐ро░рпБроорпНрокрокрпН рокрпЖро▒рпБродро▓рпН',
        gu: 'ЁЯТ░ ркХрлЗрк╢ркмрлЗркХ',
        kn: 'ЁЯТ░ р▓Хр│Нр▓пр▓╛р▓╢р│НтАМр▓мр│Нр▓пр▓╛р▓Хр│Н',
        ml: 'ЁЯТ░ р┤Хр╡Нр┤пр┤╛р┤╖р╡Нр┤мр┤╛р┤Хр╡Нр┤Хр╡Н',
        mr: 'ЁЯТ░ рдХреЕрд╢рдмреЕрдХ'
      },

      'button.ask_zabardoo': {
        en: 'ЁЯза Ask Zabardoo',
        hi: 'ЁЯза рдЬрд╝рдмрд░рджреВ рд╕реЗ рдкреВрдЫреЗрдВ',
        bn: 'ЁЯза ржЬрж╛ржмрж╛рж░ржжрзБржХрзЗ ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рзБржи',
        te: 'ЁЯза р░Ьр░мр░░р▒Нр░жр▒Вр░ир░┐ р░Ер░бр░Чр░Вр░бр░┐',
        ta: 'ЁЯза роЬрокро░рпНродрпВро╡ро┐роЯроорпН роХрпЗро│рпБроЩрпНроХро│рпН',
        gu: 'ЁЯза ркЭркмрк░ркжрлВркирлЗ рккрлВркЫрлЛ',
        kn: 'ЁЯза р▓Ьр▓мр▓░р│Нр▓жр│Вр▓ир▓ир│Нр▓ир│Б р▓Хр│Зр▓│р▓┐',
        ml: 'ЁЯза р┤╕р┤мр╡╝р┤жр╡Вр┤╡р┤┐р┤ир╡Лр┤Яр╡Н р┤Ър╡Лр┤жр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х',
        mr: 'ЁЯза рдЭрдмрд░рджреВрд▓рд╛ рд╡рд┐рдЪрд╛рд░рд╛'
      },

      'button.random_deal': {
        en: 'ЁЯО▓ Random Deal',
        hi: 'ЁЯО▓ рд░реИрдВрдбрдо рдбреАрд▓',
        bn: 'ЁЯО▓ рж░рзНржпрж╛ржирзНржбржо ржбрж┐рж▓',
        te: 'ЁЯО▓ р░░р░╛р░Вр░бр░ор▒Н р░бр▒Ар░▓р▒Н',
        ta: 'ЁЯО▓ роЪрпАро░ро▒рпНро▒ роТрокрпНрокроирпНродроорпН',
        gu: 'ЁЯО▓ рк░рлЗркирлНркбрко ркбрлАрк▓',
        kn: 'ЁЯО▓ р▓░р│Нр▓пр▓╛р▓Вр▓бр▓ор│Н р▓бр│Ар▓▓р│Н',
        ml: 'ЁЯО▓ р┤▒р┤╛р╡╗р┤бр┤В р┤бр╡Ар╡╜',
        mr: 'ЁЯО▓ рд░рдБрдбрдо рдбреАрд▓'
      },

      'button.language': {
        en: 'ЁЯМР Language',
        hi: 'ЁЯМР рднрд╛рд╖рд╛',
        bn: 'ЁЯМР ржнрж╛рж╖рж╛',
        te: 'ЁЯМР р░нр░╛р░╖',
        ta: 'ЁЯМР роорпКро┤ро┐',
        gu: 'ЁЯМР ркнрк╛рк╖рк╛',
        kn: 'ЁЯМР р▓нр▓╛р▓╖р│Ж',
        ml: 'ЁЯМР р┤нр┤╛р┤╖',
        mr: 'ЁЯМР рднрд╛рд╖рд╛'
      },

      // Messages
      'message.ai_assistant': {
        en: "I'm your personal shopping AI! I can help you find deals, compare prices, and save money.",
        hi: 'рдореИрдВ рдЖрдкрдХрд╛ рд╡реНрдпрдХреНрддрд┐рдЧрдд рд╢реЙрдкрд┐рдВрдЧ AI рд╣реВрдВ! рдореИрдВ рдЖрдкрдХреЛ рдбреАрд▓ рдЦреЛрдЬрдиреЗ, рдХреАрдорддреЛрдВ рдХреА рддреБрд▓рдирд╛ рдХрд░рдиреЗ рдФрд░ рдкреИрд╕реЗ рдмрдЪрд╛рдиреЗ рдореЗрдВ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВред',
        bn: 'ржЖржорж┐ ржЖржкржирж╛рж░ ржмрзНржпржХрзНрждрж┐ржЧржд рж╢ржкрж┐ржВ AI! ржЖржорж┐ ржЖржкржирж╛ржХрзЗ ржбрж┐рж▓ ржЦрзБржБржЬрзЗ ржкрзЗрждрзЗ, ржжрж╛ржо рждрзБрж▓ржирж╛ ржХрж░рждрзЗ ржПржмржВ ржЕрж░рзНрже рж╕рж╛рж╢рзНрж░ржпрж╝ ржХрж░рждрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐ред',
        te: 'р░ир▒Зр░ир▒Б р░ор▒А р░╡р▒Нр░пр░Хр▒Нр░др░┐р░Чр░д р░╖р░╛р░кр░┐р░Вр░Чр▒Н AI! р░ир▒Зр░ир▒Б р░ор▒Ар░Хр▒Б р░бр▒Ар░▓р▒Нр░╕р▒Н р░Хр░ир▒Бр░Чр▒Кр░ир░бр░Вр░▓р▒Л, р░зр░░р░▓р░ир▒Б р░кр▒Лр░▓р▒Нр░Ър░бр░Вр░▓р▒Л р░ор░░р░┐р░пр▒Б р░бр░мр▒Нр░мр▒Б р░Жр░жр░╛ р░Ър▒Зр░пр░бр░Вр░▓р▒Л р░╕р░╣р░╛р░пр░кр░бр░Чр░▓р░ир▒Б.',
        ta: 'роиро╛ройрпН роЙроЩрпНроХро│рпН родройро┐рокрпНрокроЯрпНроЯ ро╖ро╛рокрпНрокро┐роЩрпН AI! роиро╛ройрпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роТрокрпНрокроирпНродроЩрпНроХро│рпИроХрпН роХрогрпНроЯро▒ро┐роп, ро╡ро┐ро▓рпИроХро│рпИ роТрокрпНрокро┐роЯрпНроЯрпБ, рокрогродрпНродрпИ рооро┐роЪрпНроЪрокрпНрокроЯрпБродрпНрод роЙродро╡ роорпБроЯро┐ропрпБроорпН.',
        gu: 'рк╣рлБркВ ркдркорк╛рк░рлЛ рк╡рлНркпркХрлНркдрк┐ркЧркд рк╢рлЛрккрк┐ркВркЧ AI ркЫрлБркВ! рк╣рлБркВ ркдркоркирлЗ ркбрлАрк▓рлНрк╕ рк╢рлЛркзрк╡рк╛ркорк╛ркВ, ркХрк┐ркВркоркдрлЛркирлА ркдрлБрк▓ркирк╛ ркХрк░рк╡рк╛ркорк╛ркВ ркЕркирлЗ рккрлИрк╕рк╛ ркмркЪрк╛рк╡рк╡рк╛ркорк╛ркВ ркоркжркж ркХрк░рлА рк╢ркХрлБркВ ркЫрлБркВ.',
        kn: 'р▓ир▓╛р▓ир│Б р▓ир▓┐р▓ор│Нр▓о р▓╡р│Ир▓пр▓Хр│Нр▓др▓┐р▓Х р▓╢р▓╛р▓кр▓┐р▓Вр▓Чр│Н AI! р▓ир▓╛р▓ир│Б р▓ир▓┐р▓ор▓Чр│Ж р▓бр│Ар▓▓р│НтАМр▓Чр▓│р▓ир│Нр▓ир│Б р▓╣р│Бр▓бр│Бр▓Хр▓▓р│Б, р▓мр│Жр▓▓р│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓╣р│Лр▓▓р▓┐р▓╕р▓▓р│Б р▓ор▓др│Нр▓др│Б р▓╣р▓гр▓╡р▓ир│Нр▓ир│Б р▓Йр▓│р▓┐р▓╕р▓▓р│Б р▓╕р▓╣р▓╛р▓п р▓ор▓╛р▓бр▓мр▓╣р│Бр▓жр│Б.',
        ml: 'р┤Юр┤╛р╡╗ р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤╡р╡Нр┤пр┤Хр╡Нр┤др┤┐р┤Чр┤д р┤╖р╡Лр┤кр╡Нр┤кр┤┐р┤Вр┤Чр╡Н AI р┤Жр┤гр╡Н! р┤бр╡Ар┤▓р╡Бр┤Хр╡╛ р┤Хр┤гр╡Нр┤Яр╡Жр┤др╡Нр┤др┤╛р┤ир╡Бр┤В р┤╡р┤┐р┤▓р┤Хр╡╛ р┤др┤╛р┤░р┤др┤ор╡Нр┤пр┤В р┤Ър╡Жр┤пр╡Нр┤пр┤╛р┤ир╡Бр┤В р┤кр┤гр┤В р┤▓р┤╛р┤нр┤┐р┤Хр╡Нр┤Хр┤╛р┤ир╡Бр┤В р┤Ор┤ир┤┐р┤Хр╡Нр┤Хр╡Н р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Ж р┤╕р┤╣р┤╛р┤пр┤┐р┤Хр╡Нр┤Хр┤╛р╡╗ р┤Хр┤┤р┤┐р┤пр╡Бр┤В.',
        mr: 'рдореА рддреБрдордЪрд╛ рд╡реИрдпрдХреНрддрд┐рдХ рд╢реЙрдкрд┐рдВрдЧ AI рдЖрд╣реЗ! рдореА рддреБрдореНрд╣рд╛рд▓рд╛ рдбреАрд▓ рд╢реЛрдзрдгреНрдпрд╛рдд, рдХрд┐рдВрдорддреАрдВрдЪреА рддреБрд▓рдирд╛ рдХрд░рдгреНрдпрд╛рдд рдЖрдгрд┐ рдкреИрд╕реЗ рд╡рд╛рдЪрд╡рдгреНрдпрд╛рдд рдорджрдд рдХрд░реВ рд╢рдХрддреЛ.'
      },

      // Festival greetings
      'festival.diwali': {
        en: 'ЁЯкФ Happy Diwali! Special festival deals await you!',
        hi: 'ЁЯкФ рджрд┐рд╡рд╛рд▓реА рдХреА рд╢реБрднрдХрд╛рдордирд╛рдПрдВ! рд╡рд┐рд╢реЗрд╖ рддреНрдпреЛрд╣рд╛рд░реА рдбреАрд▓ рдЖрдкрдХрд╛ рдЗрдВрддрдЬрд╛рд░ рдХрд░ рд░рд╣реА рд╣реИрдВ!',
        bn: 'ЁЯкФ рж╢рзБржн ржжрзАржкрж╛ржмрж▓рзА! ржмрж┐рж╢рзЗрж╖ ржЙрзОрж╕ржмрзЗрж░ ржбрж┐рж▓ ржЖржкржирж╛рж░ ржЬржирзНржп ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░ржЫрзЗ!',
        te: 'ЁЯкФ р░жр▒Ар░кр░╛р░╡р░│р░┐ р░╢р▒Бр░нр░╛р░Хр░╛р░Вр░Хр▒Нр░╖р░▓р▒Б! р░кр▒Нр░░р░др▒Нр░пр▒Зр░Х р░кр░Вр░бр▒Бр░Ч р░бр▒Ар░▓р▒Нр░╕р▒Н р░ор░┐р░ор▒Нр░ор░▓р▒Нр░ир░┐ р░Ор░жр▒Бр░░р▒Бр░Ър▒Вр░╕р▒Нр░др▒Бр░ир▒Нр░ир░╛р░пр░┐!',
        ta: 'ЁЯкФ родрпАрокро╛ро╡ро│ро┐ ро╡ро╛ро┤рпНродрпНродрпБроХрпНроХро│рпН! роЪро┐ро▒рокрпНрокрпБ рокрогрпНроЯро┐роХрпИ роТрокрпНрокроирпНродроЩрпНроХро│рпН роЙроЩрпНроХро│рпБроХрпНроХро╛роХ роХро╛родрпНродро┐ро░рпБроХрпНроХро┐ройрпНро▒рой!',
        gu: 'ЁЯкФ ркжрк┐рк╡рк╛рк│рлАркирлА рк╢рлБркнрлЗркЪрлНркЫрк╛ркУ! ркЦрк╛рк╕ ркдрк╣рлЗрк╡рк╛рк░рлА ркбрлАрк▓рлНрк╕ ркдркорк╛рк░рлА рк░рк╛рк╣ ркЬрлЛркИ рк░рк╣рлА ркЫрлЗ!',
        kn: 'ЁЯкФ р▓жр│Ар▓кр▓╛р▓╡р▓│р▓┐ р▓╢р│Бр▓нр▓╛р▓╢р▓пр▓Чр▓│р│Б! р▓╡р▓┐р▓╢р│Зр▓╖ р▓╣р▓мр│Нр▓мр▓ж р▓бр│Ар▓▓р│НтАМр▓Чр▓│р│Б р▓ир▓┐р▓ор▓Чр▓╛р▓Чр▓┐ р▓Хр▓╛р▓пр│Бр▓др│Нр▓др▓┐р▓╡р│Ж!',
        ml: 'ЁЯкФ р┤жр╡Ар┤кр┤╛р┤╡р┤▓р┤┐ р┤Жр┤╢р┤Вр┤╕р┤Хр╡╛! р┤кр╡Нр┤░р┤др╡Нр┤пр╡Зр┤Х р┤Йр┤др╡Нр┤╕р┤╡ р┤бр╡Ар┤▓р╡Бр┤Хр╡╛ р┤ир┤┐р┤Щр╡Нр┤Щр╡╛р┤Хр╡Нр┤Хр┤╛р┤пр┤┐ р┤Хр┤╛р┤др╡Нр┤др┤┐р┤░р┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡Б!',
        mr: 'ЁЯкФ рджрд┐рд╡рд╛рд│реАрдЪреНрдпрд╛ рд╢реБрднреЗрдЪреНрдЫрд╛! рд╡рд┐рд╢реЗрд╖ рд╕рдгрд╛рдЪреНрдпрд╛ рдбреАрд▓ рддреБрдордЪреА рд╡рд╛рдЯ рдкрд╛рд╣рдд рдЖрд╣реЗрдд!'
      }
    };

    // Initialize translation maps
    Object.entries(commonTranslations).forEach(([key, translations]) => {
      Object.entries(translations).forEach(([lang, value]) => {
        if (!this.translations.has(lang)) {
          this.translations.set(lang, new Map());
        }
        this.translations.get(lang)!.set(key, value);
      });
    });
  }

  setUserLanguage(userId: string, languageCode: string): boolean {
    if (this.languages.has(languageCode)) {
      this.userLanguages.set(userId, languageCode);
      this.emit('languageChanged', { userId, languageCode });
      logger.info(`Language set to ${languageCode} for user ${userId}`);
      return true;
    }
    return false;
  }

  getUserLanguage(userId: string): string {
    return this.userLanguages.get(userId) || 'en';
  }

  detectLanguage(text: string): string {
    // Simple language detection based on character sets
    const hindiPattern = /[\u0900-\u097F]/;
    const bengaliPattern = /[\u0980-\u09FF]/;
    const teluguPattern = /[\u0C00-\u0C7F]/;
    const tamilPattern = /[\u0B80-\u0BFF]/;
    const gujaratiPattern = /[\u0A80-\u0AFF]/;
    const kannadaPattern = /[\u0C80-\u0CFF]/;
    const malayalamPattern = /[\u0D00-\u0D7F]/;
    const marathiPattern = /[\u0900-\u097F]/; // Same as Hindi, would need more sophisticated detection

    if (hindiPattern.test(text)) return 'hi';
    if (bengaliPattern.test(text)) return 'bn';
    if (teluguPattern.test(text)) return 'te';
    if (tamilPattern.test(text)) return 'ta';
    if (gujaratiPattern.test(text)) return 'gu';
    if (kannadaPattern.test(text)) return 'kn';
    if (malayalamPattern.test(text)) return 'ml';
    if (marathiPattern.test(text)) return 'mr';

    return 'en'; // Default to English
  }

  translate(key: string, userId?: string, fallback?: string): string {
    const userLang = userId ? this.getUserLanguage(userId) : 'en';
    const langTranslations = this.translations.get(userLang);
    
    if (langTranslations && langTranslations.has(key)) {
      return langTranslations.get(key)!;
    }

    // Fallback to English
    const englishTranslations = this.translations.get('en');
    if (englishTranslations && englishTranslations.has(key)) {
      return englishTranslations.get(key)!;
    }

    return fallback || key;
  }

  getAvailableLanguages(): Language[] {
    return Array.from(this.languages.values()).filter(lang => lang.isActive);
  }

  getLanguageInfo(code: string): Language | undefined {
    return this.languages.get(code);
  }

  formatCurrency(amount: number, userId?: string): string {
    const userLang = userId ? this.getUserLanguage(userId) : 'en';
    
    // Indian Rupee formatting
    const formatted = new Intl.NumberFormat('en-IN', {
      style: 'currency',
      currency: 'INR',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(amount);

    return formatted;
  }

  formatDate(date: Date, userId?: string): string {
    const userLang = userId ? this.getUserLanguage(userId) : 'en';
    
    const options: Intl.DateTimeFormatOptions = {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    };

    return new Intl.DateTimeFormat(userLang === 'en' ? 'en-IN' : userLang, options).format(date);
  }

  getFestivalGreeting(userId?: string): string | null {
    const now = new Date();
    const month = now.getMonth() + 1;
    const day = now.getDate();

    // Check for major Indian festivals (simplified)
    if ((month === 10 || month === 11) && day >= 20 && day <= 25) {
      // Diwali period (approximate)
      return this.translate('festival.diwali', userId);
    }

    return null;
  }

  getRegionalPreferences(userId?: string): any {
    const userLang = userId ? this.getUserLanguage(userId) : 'en';
    const language = this.languages.get(userLang);
    
    if (!language) return null;

    // Return regional preferences based on language
    const regionalData = {
      hi: { region: 'North India', popularStores: ['Flipkart', 'Amazon', 'Myntra'], currency: 'INR' },
      bn: { region: 'West Bengal', popularStores: ['Flipkart', 'Amazon', 'Nykaa'], currency: 'INR' },
      te: { region: 'South India', popularStores: ['Amazon', 'Flipkart', 'BigBasket'], currency: 'INR' },
      ta: { region: 'Tamil Nadu', popularStores: ['Amazon', 'Flipkart', 'Saravana Stores'], currency: 'INR' },
      gu: { region: 'Gujarat', popularStores: ['Reliance Digital', 'Flipkart', 'Amazon'], currency: 'INR' },
      kn: { region: 'Karnataka', popularStores: ['Amazon', 'Flipkart', 'BigBasket'], currency: 'INR' },
      ml: { region: 'Kerala', popularStores: ['Amazon', 'Flipkart', 'Lulu Mall'], currency: 'INR' },
      mr: { region: 'Maharashtra', popularStores: ['Flipkart', 'Amazon', 'BigBazaar'], currency: 'INR' }
    };

    return regionalData[userLang as keyof typeof regionalData] || regionalData.hi;
  }

  getStats(): any {
    const totalLanguages = this.languages.size;
    const activeLanguages = Array.from(this.languages.values()).filter(lang => lang.isActive).length;
    const totalUsers = this.userLanguages.size;
    
    const languageDistribution = new Map<string, number>();
    Array.from(this.userLanguages.values()).forEach(lang => {
      languageDistribution.set(lang, (languageDistribution.get(lang) || 0) + 1);
    });

    return {
      totalLanguages,
      activeLanguages,
      totalUsers,
      languageDistribution: Object.fromEntries(languageDistribution),
      totalTranslations: Array.from(this.translations.values()).reduce((sum, langMap) => sum + langMap.size, 0)
    };
  }
}