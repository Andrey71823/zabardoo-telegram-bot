#!/usr/bin/env node

// –°–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ production –æ–∫—Ä—É–∂–µ–Ω–∏—è
const { spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

class ProductionSetup {
  constructor() {
    this.checks = {
      nodeVersion: false,
      npmVersion: false,
      redis: false,
      pm2: false,
      dependencies: false,
      envFile: false
    };
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  async setup() {
    console.log('üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ production –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è BazaarGuru Bot\n');

    try {
      await this.runChecks();
      await this.installDependencies();
      await this.setupRedis();
      await this.setupPM2();
      await this.createEnvTemplate();
      await this.createDirectories();
      await this.generateConfig();

      console.log('\n‚úÖ Production –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!');
      console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
      console.log('1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env —Ñ–∞–π–ª–µ');
      console.log('2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Redis: redis-server');
      console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: npm run start:optimized');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', error.message);
      process.exit(1);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
  async runChecks() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...\n');

    // Node.js version
    const nodeVersion = process.version;
    console.log(`Node.js: ${nodeVersion}`);
    this.checks.nodeVersion = true;

    // NPM version
    try {
      const npmVersion = await this.getCommandOutput('npm --version');
      console.log(`NPM: ${npmVersion.trim()}`);
      this.checks.npmVersion = true;
    } catch (error) {
      console.log('‚ùå NPM –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    // Redis check
    try {
      await this.getCommandOutput('redis-cli ping');
      console.log('‚úÖ Redis: –ó–∞–ø—É—â–µ–Ω');
      this.checks.redis = true;
    } catch (error) {
      console.log('‚ö†Ô∏è  Redis: –ù–µ –∑–∞–ø—É—â–µ–Ω (–Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å)');
    }

    // PM2 check
    try {
      await this.getCommandOutput('pm2 --version');
      console.log('‚úÖ PM2: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      this.checks.pm2 = true;
    } catch (error) {
      console.log('‚ö†Ô∏è  PM2: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)');
    }

    console.log('');
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  async installDependencies() {
    console.log('üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');

    const dependencies = [
      'express',
      'redis',
      'bull',
      'express-rate-limit',
      'compression',
      'helmet',
      'cors',
      'pm2'
    ];

    try {
      await this.runCommand('npm install ' + dependencies.join(' '));
      console.log('‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
      this.checks.dependencies = true;
    } catch (error) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏');
    }
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Redis
  async setupRedis() {
    console.log('üóÑÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Redis...');

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Redis
    const redisConfig = `# Redis configuration for BazaarGuru Bot
bind 127.0.0.1
port 6379
timeout 0
tcp-keepalive 300
daemonize yes
supervised no
loglevel notice
logfile "./logs/redis.log"
databases 16
save 900 1
save 300 10
save 60 10000
stop-writes-on-bgsave-error no
rdbcompression yes
rdbchecksum yes
dbfilename dump.rdb
dir "./data/redis"
maxmemory 256mb
maxmemory-policy allkeys-lru
appendonly yes
appendfilename "appendonly.aof"
appendfsync everysec
no-appendfsync-on-rewrite no
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb
lua-time-limit 5000
slowlog-log-slower-than 10000
slowlog-max-len 128
notify-keyspace-events ""
hash-max-ziplist-entries 512
hash-max-ziplist-value 64
list-max-ziplist-entries 512
list-max-ziplist-value 64
set-max-intset-entries 512
zset-max-ziplist-entries 128
zset-max-ziplist-value 64
hll-sparse-max-bytes 3000
activerehashing yes
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit slave 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60
hz 10
aof-rewrite-incremental-fsync yes
`;

    const redisDir = path.join(__dirname, '../data/redis');
    if (!fs.existsSync(redisDir)) {
      fs.mkdirSync(redisDir, { recursive: true });
    }

    fs.writeFileSync(path.join(__dirname, '../redis.conf'), redisConfig);
    console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Redis —Å–æ–∑–¥–∞–Ω–∞');
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PM2
  async setupPM2() {
    console.log('‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PM2...');

    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ PM2
      await this.getCommandOutput('pm2 --version');
      console.log('‚úÖ PM2 —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    } catch (error) {
      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PM2
      await this.runCommand('npm install -g pm2');
      console.log('‚úÖ PM2 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    this.checks.pm2 = true;
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ .env —Ñ–∞–π–ª–∞
  createEnvTemplate() {
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ .env —Ñ–∞–π–ª–∞...');

    const envTemplate = `# Production Environment Configuration for BazaarGuru Bot

# ===========================================
# TELEGRAM BOT CONFIGURATION
# ===========================================
TELEGRAM_BOT_TOKEN=your_telegram_bot_token_here

# ===========================================
# SERVER CONFIGURATION
# ===========================================
PORT=3000
NODE_ENV=production

# ===========================================
# REDIS CONFIGURATION
# ===========================================
REDIS_URL=redis://127.0.0.1:6379
REDIS_PASSWORD=

# ===========================================
# WEBHOOK CONFIGURATION
# ===========================================
WEBHOOK_URL=https://yourdomain.com/webhook
WEBHOOK_SECRET=

# ===========================================
# EXTERNAL API KEYS
# ===========================================
GOOGLE_MAPS_API_KEY=your_google_maps_api_key
ZOMATO_API_KEY=your_zomato_api_key
SWIGGY_API_KEY=your_swiggy_api_key
AMAZON_ACCESS_KEY=your_amazon_access_key
AMAZON_SECRET_KEY=your_amazon_secret_key
AMAZON_ASSOCIATE_TAG=bazaarguru-21
FLIPKART_AFFILIATE_ID=your_flipkart_affiliate_id
FLIPKART_AFFILIATE_TOKEN=your_flipkart_affiliate_token
MYNTRA_API_KEY=your_myntra_api_key

# ===========================================
# MONITORING & LOGGING
# ===========================================
LOG_LEVEL=info
ENABLE_METRICS=true
METRICS_PORT=9090

# ===========================================
# SECURITY
# ===========================================
JWT_SECRET=your_jwt_secret_here
API_RATE_LIMIT=100
MAX_REQUEST_SIZE=10mb

# ===========================================
# DATABASE (Optional)
# ===========================================
DATABASE_URL=postgresql://user:password@localhost:5432/bazaarguru
REDIS_CACHE_TTL=3600

# ===========================================
# AFFILIATE PROGRAMS
# ===========================================
AFFILIATE_AMAZON_TAG=your_amazon_tag
AFFILIATE_FLIPKART_ID=your_flipkart_id
AFFILIATE_MYNTRA_ID=your_myntra_id
AFFILIATE_ZOMATO_ID=your_zomato_id

# ===========================================
# EMAIL CONFIGURATION (Optional)
# ===========================================
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your_email@gmail.com
SMTP_PASS=your_app_password

# ===========================================
# ANALYTICS (Optional)
# ===========================================
GOOGLE_ANALYTICS_ID=GA_MEASUREMENT_ID
MIXPANEL_TOKEN=your_mixpanel_token
`;

    const envPath = path.join(__dirname, '../.env.production');
    if (!fs.existsSync(envPath)) {
      fs.writeFileSync(envPath, envTemplate);
      console.log('‚úÖ –®–∞–±–ª–æ–Ω .env.production —Å–æ–∑–¥–∞–Ω');
      console.log('‚ÑπÔ∏è  –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω—É–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –≤–∞—à .env —Ñ–∞–π–ª');
    } else {
      console.log('‚ö†Ô∏è  –§–∞–π–ª .env.production —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
  createDirectories() {
    console.log('üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...');

    const directories = [
      'logs',
      'data',
      'data/redis',
      'data/cache',
      'data/uploads',
      'backups'
    ];

    directories.forEach(dir => {
      const dirPath = path.join(__dirname, '..', dir);
      if (!fs.existsSync(dirPath)) {
        fs.mkdirSync(dirPath, { recursive: true });
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${dir}`);
      }
    });
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  generateConfig() {
    console.log('‚öôÔ∏è  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');

    // PM2 ecosystem —Ñ–∞–π–ª
    const ecosystemPath = path.join(__dirname, '../ecosystem.config.js');
    if (!fs.existsSync(ecosystemPath)) {
      const ecosystemConfig = `module.exports = {
  apps: [{
    name: 'bazaarguru-optimized',
    script: './scripts/bazaarguru-optimized-bot.js',
    instances: 'max',
    exec_mode: 'cluster',
    env: {
      NODE_ENV: 'production',
      PORT: 3000,
      REDIS_URL: 'redis://127.0.0.1:6379'
    },
    error_log: './logs/pm2-error.log',
    out_log: './logs/pm2-out.log',
    log_log: './logs/pm2-combined.log',
    merge_logs: true,
    time: true,
    max_memory_restart: '500M',
    restart_delay: 1000
  }]
};`;
      fs.writeFileSync(ecosystemPath, ecosystemConfig);
      console.log('‚úÖ –§–∞–π–ª ecosystem.config.js —Å–æ–∑–¥–∞–Ω');
    }

    // Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    const nginxConfig = `upstream bazaarguru_backend {
    server 127.0.0.1:3000;
    keepalive 32;
}

server {
    listen 80;
    server_name yourdomain.com;

    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";

    # Gzip compression
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Webhook endpoint
    location /webhook {
        proxy_pass http://bazaarguru_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 86400;
    }

    # Health check
    location /health {
        proxy_pass http://bazaarguru_backend;
        access_log off;
    }

    # Stats
    location /stats {
        proxy_pass http://bazaarguru_backend;
        allow 127.0.0.1;
        deny all;
    }
}`;

    fs.writeFileSync(path.join(__dirname, '../nginx.conf'), nginxConfig);
    console.log('‚úÖ Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞');
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  getCommandOutput(command) {
    return new Promise((resolve, reject) => {
      const [cmd, ...args] = command.split(' ');
      const child = spawn(cmd, args, { stdio: 'pipe' });

      let stdout = '';
      let stderr = '';

      child.stdout.on('data', (data) => {
        stdout += data.toString();
      });

      child.stderr.on('data', (data) => {
        stderr += data.toString();
      });

      child.on('close', (code) => {
        if (code === 0) {
          resolve(stdout);
        } else {
          reject(new Error(stderr || `Command failed with code ${code}`));
        }
      });

      child.on('error', reject);
    });
  }

  runCommand(command) {
    return new Promise((resolve, reject) => {
      const [cmd, ...args] = command.split(' ');
      const child = spawn(cmd, args, {
        stdio: 'inherit',
        cwd: path.join(__dirname, '..')
      });

      child.on('close', (code) => {
        if (code === 0) {
          resolve();
        } else {
          reject(new Error(`Command failed with code ${code}`));
        }
      });

      child.on('error', reject);
    });
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
  async quickStart() {
    console.log('üöÄ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ BazaarGuru Bot...\n');

    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è .env —Ñ–∞–π–ª–∞
      const envPath = path.join(__dirname, '../.env');
      if (!fs.existsSync(envPath)) {
        console.log('‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        console.log('üìù –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.production');
        return;
      }

      // –ó–∞–ø—É—Å–∫ Redis
      console.log('üóÑÔ∏è  –ó–∞–ø—É—Å–∫ Redis...');
      try {
        await this.runCommand('redis-server ./redis.conf');
        console.log('‚úÖ Redis –∑–∞–ø—É—â–µ–Ω');
      } catch (error) {
        console.log('‚ö†Ô∏è  Redis –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
        console.log('‚ÑπÔ∏è  –ó–∞–ø—É—Å—Ç–∏—Ç–µ Redis –≤—Ä—É—á–Ω—É—é: redis-server ./redis.conf');
      }

      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
      await new Promise(resolve => setTimeout(resolve, 2000));

      // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
      console.log('ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...');
      await this.runCommand('pm2 start ecosystem.config.js');

      console.log('\nüéâ BazaarGuru Bot –∑–∞–ø—É—â–µ–Ω!');
      console.log('\nüìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:');
      console.log('  pm2 monit                    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤');
      console.log('  pm2 logs bazaarguru-optimized - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤');
      console.log('  http://localhost:3000/health - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞:', error.message);
    }
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
const args = process.argv.slice(2);
const setup = new ProductionSetup();

if (args.includes('--quick-start') || args.includes('-q')) {
  setup.quickStart();
} else if (args.includes('--help') || args.includes('-h')) {
  console.log(`
üõ†Ô∏è  BazaarGuru Production Setup

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node scripts/setup-production.js           # –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
  node scripts/setup-production.js --quick-start  # –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫
  node scripts/setup-production.js --help   # –°–ø—Ä–∞–≤–∫–∞

–ö–æ–º–∞–Ω–¥—ã:
  setup    - –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ production –æ–∫—Ä—É–∂–µ–Ω–∏—è
  quick    - –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ (—Ç—Ä–µ–±—É–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
  help     - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
  `);
} else {
  setup.setup();
}

module.exports = ProductionSetup;


