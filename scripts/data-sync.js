#!/usr/bin/env node

// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
require('dotenv').config();
const APIOrchestrator = require('../services/api-orchestrator');
const config = require('../config/api-config');

class DataSyncManager {
  constructor() {
    this.orchestrator = new APIOrchestrator();
    this.isRunning = false;
    this.syncInterval = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç
  }

  // –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  async start() {
    console.log('üöÄ Starting Data Synchronization Service...');
    console.log(`üìä Sync interval: ${this.syncInterval / (60 * 1000)} minutes`);

    this.isRunning = true;

    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø–µ—Ä–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    await this.performFullSync();

    // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    setInterval(async () => {
      if (this.isRunning) {
        await this.performFullSync();
      }
    }, this.syncInterval);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    process.on('SIGINT', () => this.stop());
    process.on('SIGTERM', () => this.stop());

    console.log('‚úÖ Data sync service is running...');
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  stop() {
    console.log('üõë Stopping Data Synchronization Service...');
    this.isRunning = false;
    process.exit(0);
  }

  // –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  async performFullSync() {
    const startTime = Date.now();
    console.log(`\nüîÑ Starting full data sync at ${new Date().toISOString()}`);

    try {
      const results = {
        products: await this.syncProducts(),
        food: await this.syncFood(),
        maps: await this.syncMaps(),
        promocodes: await this.syncPromocodes()
      };

      const duration = Date.now() - startTime;
      console.log(`‚úÖ Full sync completed in ${duration}ms`);
      console.log('üìä Sync Results:', results);

      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      await this.logSyncStats(results, duration);

    } catch (error) {
      console.error('‚ùå Full sync failed:', error);
      await this.logSyncError(error);
    }
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤
  async syncProducts() {
    console.log('üì± Syncing products...');
    const categories = Object.values(config.CATEGORIES);
    let totalProducts = 0;

    for (const category of categories) {
      try {
        const products = await this.orchestrator.getProducts(category, { force: true });
        totalProducts += products.length;
        console.log(`  ‚úÖ ${category}: ${products.length} products`);
      } catch (error) {
        console.error(`  ‚ùå ${category}: ${error.message}`);
      }
    }

    return { total: totalProducts, categories: categories.length };
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –µ–¥—ã
  async syncFood() {
    console.log('üçï Syncing food data...');
    const locations = Object.values(config.LOCATIONS);
    let totalRestaurants = 0;
    let totalDeals = 0;

    for (const location of locations) {
      try {
        // –†–µ—Å—Ç–æ—Ä–∞–Ω—ã
        const restaurants = await this.orchestrator.getNearbyRestaurants(
          location.lat,
          location.lng,
          { force: true }
        );
        totalRestaurants += restaurants.length;

        // –ê–∫—Ü–∏–∏ –Ω–∞ –µ–¥—É
        const deals = await this.orchestrator.getFoodDeals({ force: true });
        totalDeals += deals.length;

      } catch (error) {
        console.error(`  ‚ùå Location sync error: ${error.message}`);
      }
    }

    console.log(`  ‚úÖ Restaurants: ${totalRestaurants}`);
    console.log(`  ‚úÖ Food deals: ${totalDeals}`);

    return { restaurants: totalRestaurants, deals: totalDeals };
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç
  async syncMaps() {
    console.log('üó∫Ô∏è Syncing maps data...');
    const categories = Object.values(config.CATEGORIES);
    const locations = Object.values(config.LOCATIONS);
    let totalStores = 0;

    for (const location of locations) {
      for (const category of categories) {
        try {
          const stores = await this.orchestrator.getNearbyStores(
            location.lat,
            location.lng,
            category,
            { force: true }
          );
          totalStores += stores.length;
        } catch (error) {
          console.error(`  ‚ùå ${category} stores sync error: ${error.message}`);
        }
      }
    }

    console.log(`  ‚úÖ Stores: ${totalStores}`);
    return { stores: totalStores };
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
  async syncPromocodes() {
    console.log('üéÅ Syncing promocodes...');
    const categories = Object.values(config.CATEGORIES);
    let totalPromocodes = 0;

    for (const category of categories) {
      try {
        const promocodes = await this.orchestrator.getPromocodes(category, { force: true });
        totalPromocodes += promocodes.length;
        console.log(`  ‚úÖ ${category}: ${promocodes.length} promocodes`);
      } catch (error) {
        console.error(`  ‚ùå ${category} promocodes: ${error.message}`);
      }
    }

    // –û–±—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã
    try {
      const allPromocodes = await this.orchestrator.getAllActivePromocodes({ force: true });
      console.log(`  ‚úÖ Total active: ${allPromocodes.length} promocodes`);
    } catch (error) {
      console.error(`  ‚ùå All promocodes: ${error.message}`);
    }

    return { total: totalPromocodes, categories: categories.length };
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  async logSyncStats(results, duration) {
    const stats = {
      timestamp: new Date().toISOString(),
      duration: duration,
      results: results,
      cacheStats: await this.orchestrator.getCacheStats()
    };

    console.log('üìà Sync Statistics:');
    console.log(`   Duration: ${duration}ms`);
    console.log(`   Products: ${results.products.total}`);
    console.log(`   Restaurants: ${results.food.restaurants}`);
    console.log(`   Food Deals: ${results.food.deals}`);
    console.log(`   Stores: ${results.maps.stores}`);
    console.log(`   Promocodes: ${results.promocodes.total}`);

    if (stats.cacheStats) {
      console.log(`   Cache: ${stats.cacheStats.validEntries} valid, ${stats.cacheStats.expiredEntries} expired`);
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    // await this.saveLogToFile(stats);
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
  async logSyncError(error) {
    const errorLog = {
      timestamp: new Date().toISOString(),
      error: error.message,
      stack: error.stack
    };

    console.error('üö® Sync Error:', errorLog);
  }

  // –†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  async syncCategory(category, type = 'products') {
    console.log(`üîÑ Manual sync: ${type} -> ${category}`);

    try {
      let result;

      switch (type) {
        case 'products':
          result = await this.orchestrator.getProducts(category, { force: true });
          break;
        case 'promocodes':
          result = await this.orchestrator.getPromocodes(category, { force: true });
          break;
        case 'food':
          const location = config.LOCATIONS.DELHI; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Delhi
          result = await this.orchestrator.getNearbyRestaurants(location.lat, location.lng, { force: true });
          break;
        default:
          throw new Error(`Unknown sync type: ${type}`);
      }

      console.log(`‚úÖ Manual sync completed: ${result.length} items`);
      return result;

    } catch (error) {
      console.error(`‚ùå Manual sync failed: ${error.message}`);
      throw error;
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫—ç—à–∞
  async clearAllCache() {
    console.log('üßπ Clearing all cache...');
    const result = await this.orchestrator.clearCache();
    console.log(result ? '‚úÖ Cache cleared' : '‚ùå Cache clear failed');
    return result;
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main() {
  const syncManager = new DataSyncManager();
  const args = process.argv.slice(2);

  if (args.length === 0) {
    // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    await syncManager.start();
  } else {
    const command = args[0];

    switch (command) {
      case 'start':
        await syncManager.start();
        break;

      case 'sync':
        if (args.length < 3) {
          console.error('Usage: node data-sync.js sync <type> <category>');
          console.error('Types: products, promocodes, food');
          console.error('Categories: electronics, fashion, food, accessories, shoes');
          process.exit(1);
        }
        const type = args[1];
        const category = args[2];
        await syncManager.syncCategory(category, type);
        break;

      case 'clear':
        await syncManager.clearAllCache();
        break;

      case 'once':
        await syncManager.performFullSync();
        break;

      default:
        console.log('Usage:');
        console.log('  node data-sync.js                    # Start auto sync');
        console.log('  node data-sync.js start             # Start auto sync');
        console.log('  node data-sync.js once              # Run sync once');
        console.log('  node data-sync.js sync <type> <cat> # Manual category sync');
        console.log('  node data-sync.js clear             # Clear all cache');
        process.exit(1);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch(console.error);
}

module.exports = DataSyncManager;

