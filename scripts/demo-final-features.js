#!/usr/bin/env node

// Demo script for final features: AI Content Tools, Loot Mode, Admin Moderation
console.log('üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –§–ò–ù–ê–õ–¨–ù–´–• –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô bazaarGuru BOT');
console.log('=' .repeat(60));

// Import services
const { AIContentService } = require('../src/services/ai/AIContentService');
const { LootModeService } = require('../src/services/gamification/LootModeService');
const { AdminModerationService } = require('../src/services/admin/AdminModerationService');

async function demoAIContentTools() {
  console.log('\nü§ñ AI CONTENT TOOLS DEMO');
  console.log('-'.repeat(40));
  
  const aiContent = new AIContentService();
  
  // Demo Instagram caption generation
  console.log('üì∏ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Instagram Caption:');
  const instagramRequest = {
    type: 'instagram_caption',
    context: {
      dealTitle: 'iPhone 15 Pro',
      storeName: 'Amazon India',
      discount: '25% OFF',
      price: '‚Çπ89,900',
      category: 'electronics',
      mood: 'exciting'
    }
  };
  
  try {
    const caption = await aiContent.generateInstagramCaption(instagramRequest);
    console.log('‚úÖ Generated Caption:');
    console.log(caption.content);
    console.log('üì± Hashtags:', caption.hashtags?.slice(0, 5).join(' '));
  } catch (error) {
    console.log('‚ö†Ô∏è Using fallback caption generation');
  }
  
  // Demo meme generation
  console.log('\nüòÇ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ú–µ–º–∞:');
  const memeRequest = {
    type: 'meme',
    context: {
      dealTitle: 'MacBook Pro M3',
      storeName: 'Flipkart',
      discount: '20% OFF',
      category: 'electronics',
      mood: 'funny'
    }
  };
  
  try {
    const meme = await aiContent.generateMeme(memeRequest);
    console.log('‚úÖ Generated Meme:');
    console.log(meme.content);
  } catch (error) {
    console.log('‚ö†Ô∏è Using fallback meme generation');
  }
  
  // Demo hashtag suggestions
  console.log('\n#Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –•–µ—à—Ç–µ–≥–æ–≤:');
  const hashtagRequest = {
    type: 'hashtags',
    context: {
      category: 'fashion',
      storeName: 'Myntra',
      occasion: 'sale'
    }
  };
  
  const hashtags = await aiContent.generateHashtagSuggestions(hashtagRequest);
  console.log('‚úÖ Generated Hashtags:');
  console.log(hashtags.content);
}

async function demoLootMode() {
  console.log('\nüé∞ LOOT MODE & SPIN THE WHEEL DEMO');
  console.log('-'.repeat(40));
  
  const lootMode = new LootModeService();
  
  // Demo user spin
  console.log('üé≤ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫—Ä—É—Ç–∏—Ç –∫–æ–ª–µ—Å–æ:');
  const userId = 'demo_user_123';
  
  try {
    const spinResult = await lootMode.spinWheel(userId);
    
    if (spinResult.success) {
      console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ø–∏–Ω–∞:');
      console.log(`üéÅ –ù–∞–≥—Ä–∞–¥–∞: ${spinResult.result.reward.title}`);
      console.log(`üíé –†–µ–¥–∫–æ—Å—Ç—å: ${spinResult.result.reward.rarity}`);
      console.log(`üí∞ –ó–Ω–∞—á–µ–Ω–∏–µ: ${spinResult.result.reward.value}`);
      console.log(`üéä –î–∂–µ–∫–ø–æ—Ç: ${spinResult.result.isJackpot ? '–î–ê!' : '–ù–µ—Ç'}`);
    } else {
      console.log('‚ùå –°–ø–∏–Ω –Ω–µ —É–¥–∞–ª—Å—è:', spinResult.error);
      if (spinResult.nextSpinAvailable) {
        console.log('‚è∞ –°–ª–µ–¥—É—é—â–∏–π —Å–ø–∏–Ω –¥–æ—Å—Ç—É–ø–µ–Ω:', spinResult.nextSpinAvailable);
      }
    }
  } catch (error) {
    console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–º–æ —Å–ø–∏–Ω–∞');
  }
  
  // Demo user stats
  console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
  const userStats = await lootMode.getUserLootStats(userId);
  console.log(`üéØ –í—Å–µ–≥–æ —Å–ø–∏–Ω–æ–≤: ${userStats.totalSpins}`);
  console.log(`üèÜ –í—Å–µ–≥–æ –Ω–∞–≥—Ä–∞–¥: ${userStats.totalRewardsWon}`);
  console.log(`üî• –¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: ${userStats.currentStreak}`);
  console.log(`üíé –î–∂–µ–∫–ø–æ—Ç–æ–≤ –≤—ã–∏–≥—Ä–∞–Ω–æ: ${userStats.jackpotsWon}`);
  
  // Demo available rewards
  console.log('\nüéÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã:');
  const rewards = await lootMode.getAvailableRewards();
  rewards.slice(0, 5).forEach(reward => {
    console.log(`${reward.icon} ${reward.title} (${reward.rarity})`);
  });
  
  // Demo leaderboard
  console.log('\nüèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ (–ø–æ —Å–ø–∏–Ω–∞–º):');
  const leaderboard = await lootMode.getLeaderboard('total_spins', 3);
  leaderboard.forEach((entry, index) => {
    console.log(`${index + 1}. User ${entry.userId}: ${entry.value} —Å–ø–∏–Ω–æ–≤`);
  });
}

async function demoAdminModeration() {
  console.log('\nüõ°Ô∏è ADMIN MODERATION SYSTEM DEMO');
  console.log('-'.repeat(40));
  
  const moderation = new AdminModerationService();
  
  // Demo message moderation
  console.log('üîç –ú–æ–¥–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:');
  
  const testMessages = [
    { content: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?', expected: 'allowed' },
    { content: 'AAAAAAAAAA —Å–ø–∞–º —Å–ø–∞–º —Å–ø–∞–º', expected: 'spam' },
    { content: 'Fuck this shit!', expected: 'profanity' },
    { content: 'Check out this deal: https://scam-site.com', expected: 'url' },
    { content: 'Free money! Click here to win!', expected: 'scam' }
  ];
  
  for (const test of testMessages) {
    const result = await moderation.moderateMessage(
      'test_user',
      test.content,
      'msg_123',
      'chat_456'
    );
    
    console.log(`üìù "${test.content.substring(0, 30)}..."`);
    console.log(`   ${result.allowed ? '‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–æ' : '‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ'}`);
    if (!result.allowed) {
      console.log(`   üö´ –ü—Ä–∏—á–∏–Ω–∞: ${result.reason}`);
      console.log(`   ‚ö° –î–µ–π—Å—Ç–≤–∏–µ: ${result.action}`);
    }
  }
  
  // Demo moderation rules
  console.log('\nüìã –ü—Ä–∞–≤–∏–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:');
  const rules = await moderation.getModerationRules();
  rules.slice(0, 3).forEach(rule => {
    console.log(`üîß ${rule.name}: ${rule.description}`);
    console.log(`   –î–µ–π—Å—Ç–≤–∏–µ: ${rule.action}, –°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å: ${rule.severity}`);
  });
  
  // Demo moderation stats
  console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:');
  const stats = await moderation.getModerationStats();
  console.log(`üéØ –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: ${stats.totalActions}`);
  console.log(`ü§ñ –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: ${stats.autoDetectionRate.toFixed(1)}%`);
  console.log(`üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.activeUsers}`);
  console.log(`üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: ${stats.bannedUsers}`);
  console.log(`üö© –ü–æ–º–µ—á–µ–Ω–Ω—ã—Ö: ${stats.flaggedUsers}`);
}

async function demoLanguageIntegration() {
  console.log('\nüåê LANGUAGE INTEGRATION DEMO');
  console.log('-'.repeat(40));
  
  console.log('üó£Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏ –≤ –±–æ—Ç–µ:');
  const languages = [
    { code: 'en', name: 'English', flag: 'üá∫üá∏' },
    { code: 'hi', name: '‡§π‡§ø‡§Ç‡§¶‡•Ä (Hindi)', flag: 'üáÆüá≥' },
    { code: 'bn', name: '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ (Bengali)', flag: 'üáÆüá≥' },
    { code: 'ta', name: '‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç (Tamil)', flag: 'üáÆüá≥' },
    { code: 'te', name: '‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å (Telugu)', flag: 'üáÆüá≥' },
    { code: 'gu', name: '‡™ó‡´Å‡™ú‡™∞‡™æ‡™§‡´Ä (Gujarati)', flag: 'üáÆüá≥' },
    { code: 'kn', name: '‡≤ï‡≤®‡≥ç‡≤®‡≤° (Kannada)', flag: 'üáÆüá≥' },
    { code: 'ml', name: '‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç (Malayalam)', flag: 'üáÆüá≥' },
    { code: 'mr', name: '‡§Æ‡§∞‡§æ‡§†‡•Ä (Marathi)', flag: 'üáÆüá≥' }
  ];
  
  languages.forEach(lang => {
    console.log(`${lang.flag} ${lang.name} (${lang.code})`);
  });
  
  console.log('\nüéØ –ù–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –±–æ—Ç–µ:');
  console.log('üé≤ Random Deal - —Å–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è');
  console.log('üåê Language Selector - –≤—ã–±–æ—Ä —è–∑—ã–∫–∞');
  console.log('üß† Ask bazaarGuru - –ò–ò –ø–æ–º–æ—â–Ω–∏–∫');
  
  console.log('\n‚ú® –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ enhanced-guide-bot.js');
}

async function runDemo() {
  try {
    await demoAIContentTools();
    await demoLootMode();
    await demoAdminModeration();
    await demoLanguageIntegration();
    
    console.log('\nüéä –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!');
    console.log('=' .repeat(60));
    console.log('‚úÖ –í—Å–µ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
    console.log('üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ –¥–µ–º–æ
if (require.main === module) {
  runDemo();
}

module.exports = { runDemo };