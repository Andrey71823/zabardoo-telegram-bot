#!/usr/bin/env node

// –°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
const https = require('https');

class BotMonitor {
  constructor() {
    this.baseUrl = 'http://localhost:3000';
    this.interval = 30000; // 30 —Å–µ–∫—É–Ω–¥
    this.alerts = [];
  }

  // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  async start() {
    console.log('üìä –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ BazaarGuru Optimized Bot\n');
    console.log(`üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: ${this.interval / 1000} —Å–µ–∫—É–Ω–¥\n`);

    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    await this.checkHealth();

    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    setInterval(async () => {
      await this.checkHealth();
      this.displayAlerts();
    }, this.interval);

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
    setInterval(() => {
      this.checkSystemResources();
    }, 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞
  async checkHealth() {
    try {
      const health = await this.makeRequest('/health');
      this.displayHealthStatus(health);
      this.checkThresholds(health);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è:', error.message);
      this.addAlert('CRITICAL', '–ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', error.message);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  async checkStats() {
    try {
      const stats = await this.makeRequest('/stats');
      this.displayStats(stats);
      return stats;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
      return null;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
  checkSystemResources() {
    const memUsage = process.memoryUsage();
    const cpuUsage = process.cpuUsage();

    const memoryMB = Math.floor(memUsage.heapUsed / 1024 / 1024);
    const memoryPercent = Math.floor((memUsage.heapUsed / memUsage.heapTotal) * 100);

    console.log(`üíæ –ü–∞–º—è—Ç—å: ${memoryMB}MB (${memoryPercent}%)`);

    if (memoryPercent > 80) {
      this.addAlert('WARNING', '–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏', `${memoryPercent}%`);
    }

    if (cpuUsage.user > 10000000) { // 10 —Å–µ–∫—É–Ω–¥ CPU time
      this.addAlert('WARNING', '–í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU', '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å');
    }
  }

  // HTTP –∑–∞–ø—Ä–æ—Å –∫ –±–æ—Ç—É
  makeRequest(path) {
    return new Promise((resolve, reject) => {
      const url = this.baseUrl + path;
      const req = https.get(url, (res) => {
        let data = '';

        res.on('data', (chunk) => {
          data += chunk;
        });

        res.on('end', () => {
          try {
            if (res.statusCode === 200) {
              const result = JSON.parse(data);
              resolve(result);
            } else {
              reject(new Error(`HTTP ${res.statusCode}`));
            }
          } catch (error) {
            reject(error);
          }
        });
      });

      req.on('error', reject);
      req.setTimeout(5000, () => {
        req.abort();
        reject(new Error('Timeout'));
      });
    });
  }

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è
  displayHealthStatus(health) {
    const uptime = Math.floor(health.uptime / 60);
    const memoryMB = Math.floor(health.memory.used / 1024 / 1024);

    console.log(`üè• –ó–¥–æ—Ä–æ–≤—å–µ –±–æ—Ç–∞: ${health.status.toUpperCase()}`);
    console.log(`‚è±Ô∏è  Uptime: ${uptime} –º–∏–Ω—É—Ç`);
    console.log(`üíæ –ü–∞–º—è—Ç—å: ${memoryMB}MB / ${health.memory.total}MB`);
    console.log(`üìä –û—à–∏–±–æ–∫: ${health.stats.errors}`);
    console.log('');
  }

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  displayStats(stats) {
    console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:');
    console.log(`üì® –°–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${stats.messagesProcessed || 0}`);
    console.log(`üìã –û—á–µ—Ä–µ–¥—å: ${stats.queueSize || 0}`);
    console.log(`‚öôÔ∏è  –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: ${stats.activeJobs || 0}`);
    console.log('');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
  checkThresholds(health) {
    const memoryPercent = (health.memory.used / health.memory.total) * 100;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
    if (memoryPercent > 85) {
      this.addAlert('CRITICAL', '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏', `${memoryPercent.toFixed(1)}%`);
    } else if (memoryPercent > 70) {
      this.addAlert('WARNING', '–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏', `${memoryPercent.toFixed(1)}%`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫
    if (health.stats.errors > 100) {
      this.addAlert('CRITICAL', '–ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫', `${health.stats.errors} –æ—à–∏–±–æ–∫`);
    } else if (health.stats.errors > 50) {
      this.addAlert('WARNING', '–ü–æ–≤—ã—à–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫', `${health.stats.errors} –æ—à–∏–±–æ–∫`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
    if (health.uptime < 300) { // 5 –º–∏–Ω—É—Ç
      this.addAlert('INFO', '–ë–æ—Ç –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–ø—É—â–µ–Ω', `${Math.floor(health.uptime / 60)} –º–∏–Ω—É—Ç`);
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞
  addAlert(level, title, message) {
    const alert = {
      id: Date.now(),
      level,
      title,
      message,
      timestamp: new Date().toISOString()
    };

    this.alerts.unshift(alert);

    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–ª–µ—Ä—Ç–æ–≤
    if (this.alerts.length > 50) {
      this.alerts = this.alerts.slice(0, 50);
    }
  }

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤
  displayAlerts() {
    if (this.alerts.length === 0) return;

    console.log('üö® –ê–ª–µ—Ä—Ç—ã:');

    // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∞–ª–µ—Ä—Ç–æ–≤
    const recentAlerts = this.alerts.slice(0, 5);

    recentAlerts.forEach(alert => {
      const icon = {
        'CRITICAL': 'üî¥',
        'WARNING': 'üü°',
        'INFO': '‚ÑπÔ∏è'
      }[alert.level] || '‚ö™';

      console.log(`${icon} ${alert.level}: ${alert.title}`);
      console.log(`   ${alert.message}`);
    });

    console.log('');
  }

  // –≠–∫—Å–ø–æ—Ä—Ç –º–µ—Ç—Ä–∏–∫
  async exportMetrics() {
    try {
      const health = await this.makeRequest('/health');
      const stats = await this.makeRequest('/stats');

      const metrics = {
        timestamp: new Date().toISOString(),
        health,
        stats,
        alerts: this.alerts.slice(0, 10),
        system: {
          memory: process.memoryUsage(),
          uptime: process.uptime(),
          platform: process.platform,
          nodeVersion: process.version
        }
      };

      const fs = require('fs');
      const path = require('path');
      const metricsPath = path.join(__dirname, '../logs/metrics.json');

      fs.writeFileSync(metricsPath, JSON.stringify(metrics, null, 2));
      console.log('‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ logs/metrics.json');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–µ—Ç—Ä–∏–∫:', error.message);
    }
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  stop() {
    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
    this.exportMetrics();
    process.exit(0);
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
const args = process.argv.slice(2);
const monitor = new BotMonitor();

if (args.includes('--export') || args.includes('-e')) {
  monitor.exportMetrics();
} else if (args.includes('--once') || args.includes('-o')) {
  monitor.checkHealth().then(() => monitor.checkStats());
} else if (args.includes('--help') || args.includes('-h')) {
  console.log(`
üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ BazaarGuru Optimized Bot

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node scripts/monitor-optimized-bot.js          # –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  node scripts/monitor-optimized-bot.js --once   # –û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
  node scripts/monitor-optimized-bot.js --export # –≠–∫—Å–ø–æ—Ä—Ç –º–µ—Ç—Ä–∏–∫
  node scripts/monitor-optimized-bot.js --help   # –°–ø—Ä–∞–≤–∫–∞

–ú–µ—Ç—Ä–∏–∫–∏:
  üè• –ó–¥–æ—Ä–æ–≤—å–µ –±–æ—Ç–∞ (uptime, –ø–∞–º—è—Ç—å, –æ—à–∏–±–∫–∏)
  üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Å–æ–æ–±—â–µ–Ω–∏—è, –æ—á–µ—Ä–µ–¥—å, –∑–∞–¥–∞—á–∏)
  üö® –ê–ª–µ—Ä—Ç—ã (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è)
  üíæ –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã (CPU, –ø–∞–º—è—Ç—å)

–ü–æ—Ä–æ–≥–∏ –∞–ª–µ—Ä—Ç–æ–≤:
  üî¥ CRITICAL: >85% –ø–∞–º—è—Ç–∏, >100 –æ—à–∏–±–æ–∫
  üü° WARNING: >70% –ø–∞–º—è—Ç–∏, >50 –æ—à–∏–±–æ–∫
  ‚ÑπÔ∏è INFO: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  `);
} else {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  process.on('SIGINT', () => monitor.stop());
  process.on('SIGTERM', () => monitor.stop());

  monitor.start();
}

module.exports = BotMonitor;


