version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: bazaarGuru-postgres
    environment:
      POSTGRES_DB: bazaarGuru
      POSTGRES_USER: bazaarGuru_user
      POSTGRES_PASSWORD: bazaarGuru_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/migrations:/docker-entrypoint-initdb.d/migrations
    networks:
      - bazaarGuru-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: bazaarGuru-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - bazaarGuru-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile.gateway
    container_name: bazaarGuru-gateway
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=bazaarGuru
      - POSTGRES_USER=bazaarGuru_user
      - POSTGRES_PASSWORD=bazaarGuru_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - postgres
      - redis
    networks:
      - bazaarGuru-network
    restart: unless-stopped

  # Channel Manager Service
  channel-manager:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        SERVICE_NAME: channel-manager
    container_name: bazaarGuru-channel-manager
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - SERVICE_NAME=channel-manager
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
    depends_on:
      - postgres
      - redis
    networks:
      - bazaarGuru-network
    restart: unless-stopped

  # Group Manager Service
  group-manager:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        SERVICE_NAME: group-manager
    container_name: bazaarGuru-group-manager
    ports:
      - "3007:3007"
    environment:
      - NODE_ENV=development
      - PORT=3007
      - SERVICE_NAME=group-manager
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
    depends_on:
      - postgres
      - redis
    networks:
      - bazaarGuru-network
    restart: unless-stopped

  # Sync Manager Service
  sync-manager:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        SERVICE_NAME: sync-manager
    container_name: bazaarGuru-sync-manager
    ports:
      - "3008:3008"
    environment:
      - NODE_ENV=development
      - PORT=3008
      - SERVICE_NAME=sync-manager
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
    depends_on:
      - postgres
      - redis
    networks:
      - bazaarGuru-network
    restart: unless-stopped

  # AI Assistant Service
  ai-assistant:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        SERVICE_NAME: ai-assistant
    container_name: bazaarGuru-ai-assistant
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - PORT=3002
      - SERVICE_NAME=ai-assistant
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - postgres
      - redis
    networks:
      - bazaarGuru-network
    restart: unless-stopped

  # Recommendation Service
  recommendation-service:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        SERVICE_NAME: recommendation-service
    container_name: bazaarGuru-recommendation-service
    ports:
      - "3009:3009"
    environment:
      - NODE_ENV=development
      - PORT=3009
      - SERVICE_NAME=recommendation-service
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
    depends_on:
      - postgres
      - redis
    networks:
      - bazaarGuru-network
    restart: unless-stopped

  # Proactive Notification Service
  proactive-notification-service:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        SERVICE_NAME: proactive-notification-service
    container_name: bazaarGuru-proactive-notification-service
    ports:
      - "3010:3010"
    environment:
      - NODE_ENV=development
      - PORT=3010
      - SERVICE_NAME=proactive-notification-service
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
    depends_on:
      - postgres
      - redis
    networks:
      - bazaarGuru-network
    restart: unless-stopped

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: bazaarGuru-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - bazaarGuru-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: bazaarGuru-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - bazaarGuru-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  bazaarGuru-network:
    driver: bridge